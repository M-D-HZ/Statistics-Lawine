Lawine <- read.csv("Lawine.csv", row.names=1)
Lawine <- read.csv("Lawine.csv", row.names=1)
Lawine <- read.csv("Dataset/Lawine.csv", row.names=1)
Lawine <- read.csv("Dataset/Lawine.csv", row.names=1)
# Set your working directory to the project root (Statistics-lawine)
setwd("C:/Users/Anass Othman Hamzaou/Documents/Repos/Statistics-lawine")
# Then use relative paths from there
Lawine <- read.csv("src/Dataset/Lawine.csv", row.names=1)
set.seed(0210294); myLawineIndex = sample(1:500, 450)
myLawine = Lawine[myLawineIndex,]
Temperatuur <- read.csv("src/Dataset/Temperatuur.csv", row.names=1)
set.seed(0210294); myTempIndex = sample(1:2500, 250)
myTemp = Temperatuur[myTempIndex,]
Wind <- read.csv("src/Dataset/Wind.csv", row.names=1)
set.seed(0210294); myWindIndex = sample(1:1000, 50)
myWind = Wind[myWindIndex,]
install.packages("here")
View(myLawine)
View(Lawine)
library(here)
# Read Lawine data
Lawine <- read.csv(here("src", "Dataset", "Lawine.csv"), row.names = 1)
set.seed(0210294)
myLawineIndex <- sample(1:500, 450)
myLawine <- Lawine[myLawineIndex, ]
# Read Temperatuur data
Temperatuur <- read.csv(here("src", "Dataset", "Temperatuur.csv"), row.names = 1)
set.seed(0210294)
myTempIndex <- sample(1:2500, 250)
myTemp <- Temperatuur[myTempIndex, ]
# Read Wind data
Wind <- read.csv(here("src", "Dataset", "Wind.csv"), row.names = 1)
set.seed(0210294)
myWindIndex <- sample(1:1000, 50)
myWind <- Wind[myWindIndex, ]
# Verify the data loaded correctly
cat("Lawine data dimensions:", dim(myLawine), "\n")
cat("Temperatuur data dimensions:", dim(myTemp), "\n")
cat("Wind data dimensions:", dim(myWind), "\n")
View(Wind)
View(Lawine)
View(myLawine)
View(Lawine)
View(myTemp)
View(Temperatuur)
View(Lawine)
View(myLawine)
# Author: Anass Hamzaoui - 20210294
# Part 1: Loading all the given data based on my student number
library(here)
# Read Lawine data
Lawine <- read.csv(here("src", "Dataset", "Lawine.csv"), row.names = 1)
set.seed(20210294)
myLawineIndex <- sample(1:500, 450)
myLawine <- Lawine[myLawineIndex, ]
# Read Temperatuur data
Temperatuur <- read.csv(here("src", "Dataset", "Temperatuur.csv"), row.names = 1)
set.seed(20210294)
myTempIndex <- sample(1:2500, 250)
myTemp <- Temperatuur[myTempIndex, ]
# Read Wind data
Wind <- read.csv(here("src", "Dataset", "Wind.csv"), row.names = 1)
set.seed(20210294)
myWindIndex <- sample(1:1000, 50)
myWind <- Wind[myWindIndex, ]
# Verify the data loaded correctly
cat("Lawine data dimensions:", dim(myLawine), "\n")
cat("Temperatuur data dimensions:", dim(myTemp), "\n")
cat("Wind data dimensions:", dim(myWind), "\n")
View(Lawine)
View(myLawine)
View(myLawine)
View(myTemp)
myWind
View(myWind)
myWind
# Assuming you've already loaded the data as shown previously
# Let's create a clean dataframe with just the variables we need
lawine_data <- data.frame(
temperature = myLawine$Temperatuur,  # Adjust if column name is different
risk_score = myLawine$Score          # Adjust if column name is different
)
View(myLawine)
View(myLawine)
head(myLawine)  # View first few rows
summary(myLawine)  # Summary statistics
str(myLawine)  # Check data types
ggplot(myLawine, aes(x = Temperatuur, y = LawineGevaar)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Relationship between Temperature and Avalanche Risk",
x = "Temperature (°C)",
y = "Avalanche Risk (1-10)") +
theme_minimal()
install.packages("ggplot.multistats")
install.packages("ggplot2")
ggplot(myLawine, aes(x = Temperatuur, y = LawineGevaar)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Relationship between Temperature and Avalanche Risk",
x = "Temperature (°C)",
y = "Avalanche Risk (1-10)") +
theme_minimal()
library(ggplot2)
ggplot(myLawine, aes(x = Temperatuur, y = LawineGevaar)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Relationship between Temperature and Avalanche Risk",
x = "Temperature (°C)",
y = "Avalanche Risk (1-10)") +
theme_minimal()
library(ggplot2)
ggplot(myLawine, aes(x = Temperatuur, y = LawineGevaar)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Relationship between Temperature and Avalanche Risk",
x = "Temperature (°C)",
y = "Avalanche Risk (1-10)") +
library(ggplot2)
library(ggplot2)
ggplot(myLawine, aes(x = Temperatuur, y = LawineGevaar)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Relationship between Temperature and Avalanche Risk",
x = "Temperature (°C)",
y = "Avalanche Risk (1-10)") +
theme_minimal()
rlang::last_trace()
# Author: Anass Hamzaoui - 20210294
# Part 1: Loading all the given data based on my student number
library(here)
# Read Lawine data
Lawine <- read.csv(here("src", "Dataset", "Lawine.csv"), row.names = 1)
set.seed(20210294)
myLawineIndex <- sample(1:500, 450)
myLawine <- Lawine[myLawineIndex,]
head(myLawine)  # View first few rows
summary(myLawine)  # Summary statistics
str(myLawine)  # Check data types
library(ggplot2)
ggplot(myLawine, aes(x = Temperatuur, y = LawineGevaar)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Relationship between Temperature and Avalanche Risk",
x = "Temperature (°C)",
y = "Avalanche Risk (1-10)") +
theme_minimal()
# Histograms
par(mfrow = c(1, 2))
hist(myLawine$Temperatuur, main = "Temperature Distribution")
hist(myLawine$LawineGevaar, main = "Avalanche Risk Distribution")
# Shapiro-Wilk test (if sample size is small; for n > 50, histograms are sufficient)
shapiro.test(myLawine$Temperatuur)
shapiro.test(myLawine$LawineGevaar)
library(ggplot2)
ggplot(myLawine, aes(x = Temperatuur, y = LawineGevaar)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Relationship between Temperature and Avalanche Risk",
x = "Temperature (°C)",
y = "Avalanche Risk (1-10)") +
theme_minimal()
# Histograms
par(mfrow = c(1, 2))
hist(myLawine$Temperatuur, main = "Temperature Distribution")
hist(myLawine$LawineGevaar, main = "Avalanche Risk Distribution")
# Shapiro-Wilk test (if sample size is small; for n > 50, histograms are sufficient)
shapiro.test(myLawine$Temperatuur)
shapiro.test(myLawine$LawineGevaar)
cor_test <- cor.test(myLawine$Temperatuur, myLawine$LawineGevaar,
method = "pearson")
print(cor_test)
library(ggplot2)
ggplot(myLawine, aes(x = Temperatuur, y = LawineGevaar)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = paste("Negative Correlation (r =", round(cor_test$estimate, 2), ")"),
x = "Temperature (°C)",
y = "Avalanche Risk (1-10)"
) +
theme_minimal()
# Histograms
par(mfrow = c(1, 2))
hist(myLawine$Temperatuur, main = "Temperature Distribution")
hist(myLawine$LawineGevaar, main = "Avalanche Risk Distribution")
# Shapiro-Wilk test (if sample size is small; for n > 50, histograms are sufficient)
shapiro.test(myLawine$Temperatuur)
shapiro.test(myLawine$LawineGevaar)
# Pearson correlation
cor_test <- cor.test(myLawine$Temperatuur, myLawine$LawineGevaar,
method = "pearson")
print(cor_test)
# Pearson correlation result: The histogram shows a bimodal distribution (two peaks),
# which violates Pearson’s assumption of normality. so we will use spearman's correlation
# Spearman correlation
cor_test_spearman <- cor.test(myLawine$Temperatuur, myLawine$LawineGevaar,
method = "spearman")
print(cor_test_spearman)
# Boxplot to check for outliers
boxplot(myLawine$Temperatuur, main = "Temperature Boxplot")
# Regression Analysis to quantify the relationship
model <- lm(LawineGevaar ~ Temperatuur, data = myLawine)
summary(model)
View(myTemp)
